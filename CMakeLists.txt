#machine generated

cmake_minimum_required(VERSION 3.12)

set(JCPP_PROJECT_GROUP "")
set(JCPP_PROJECT_NAME "java.security.jgss")
set(JCPP_PROJECT_VERSION "17.35")
if(JCPP_PROJECT_GROUP)
	set(JCPP_PROJECT_FULL_NAME "${JCPP_PROJECT_GROUP}-${JCPP_PROJECT_NAME}")
	string(REPLACE "." "/" JCPP_PROJECT_GROUP_PATH ${JCPP_PROJECT_GROUP})
	set(JCPP_PROJECT_DIR "${JCPP_PROJECT_GROUP_PATH}/${JCPP_PROJECT_NAME}/${JCPP_PROJECT_VERSION}")
else()
	set(JCPP_PROJECT_FULL_NAME "${JCPP_PROJECT_NAME}")
	set(JCPP_PROJECT_DIR "${JCPP_PROJECT_NAME}/${JCPP_PROJECT_VERSION}")
endif()
message(STATUS "${JCPP_PROJECT_DIR}")

project(${JCPP_PROJECT_NAME} C CXX)

if(CMAKE_SYSTEM_NAME MATCHES "Windows")
	set(JCPP_OS "windows")
elseif(CMAKE_SYSTEM_NAME MATCHES "Linux")
	set(JCPP_OS "linux")
elseif(CMAKE_SYSTEM_NAME MATCHES "Darwin")
	set(JCPP_OS "macosx")
else()
	message(FATAL_ERROR "Unknown system name:${CMAKE_SYSTEM_NAME}")
endif()
message(STATUS "CMAKE_SYSTEM_NAME:${CMAKE_SYSTEM_NAME}")
message(STATUS "JCPP_OS:${JCPP_OS}")

if(CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64")
	set(JCPP_CPU "x86")
	set(JCPP_ARCH "x86_64")
elseif(CMAKE_SYSTEM_PROCESSOR STREQUAL "AMD64")
	set(JCPP_CPU "x86")
	set(JCPP_ARCH "amd64")
elseif(CMAKE_SYSTEM_PROCESSOR STREQUAL "arm64")
	set(JCPP_CPU "aarch64")
	set(JCPP_ARCH "aarch64")
elseif(CMAKE_SYSTEM_PROCESSOR STREQUAL "aarch64")
	set(JCPP_CPU "aarch64")
	set(JCPP_ARCH "aarch64")
else()
	message(FATAL_ERROR "Unknown processor:${CMAKE_SYSTEM_PROCESSOR}")
endif()
message(STATUS "CMAKE_SYSTEM_PROCESSOR:${CMAKE_SYSTEM_PROCESSOR}")
message(STATUS "JCPP_CPU:${JCPP_CPU}")
message(STATUS "JCPP_ARCH:${JCPP_ARCH}")

option(BUILD_SHARED_LIB "Build shared lib" ON)
option(BUILD_TEST "Build test" ON)
option(INSTALL_TO_REPO "Install to {JCPP_HOME}/repository" OFF)
option(ENABLE_NC "Enable NC(nullcheck)" OFF)

if(BUILD_SHARED_LIB)
	message(STATUS "build shared lib")
else()
	set(BUILD_STATIC_LIB true)
	message(STATUS "build static lib")
endif()

if(ENABLE_NC)
	add_definitions(-DJCPP_ENABLE_NC)
	message(STATUS "enable NC(nullcheck)")
endif()

if(BUILD_TEST)
	message(STATUS "build test")
endif()

if(NOT JCPP_HOME)
	set(JCPP_HOME "$ENV{JCPP_HOME}")
	if(NOT JCPP_HOME)
		if(WIN32)
			set(JCPP_HOME "$ENV{HOMEDRIVE}$ENV{HOMEPATH}/jcpp")
		else()
			set(JCPP_HOME "$ENV{HOME}/jcpp")
		endif()
	endif()
endif()
get_filename_component(JCPP_HOME "${JCPP_HOME}" ABSOLUTE)
cmake_path(SET JCPP_HOME "${JCPP_HOME}")
set(JCPP_REPOSITORY_ROOT "${JCPP_HOME}/repository")

if(INSTALL_TO_REPO)
	set(CMAKE_INSTALL_PREFIX "${JCPP_REPOSITORY_ROOT}/${JCPP_PROJECT_DIR}")
	if(CMAKE_BUILD_TYPE MATCHES "Debug")
		set(JCPP_INSTALL_BIN_DIR "debug/bin")
		set(JCPP_INSTALL_LIB_DIR "debug/lib")
	else()
		set(JCPP_INSTALL_BIN_DIR "$<$<CONFIG:Debug>:debug/>bin")
		set(JCPP_INSTALL_LIB_DIR "$<$<CONFIG:Debug>:debug/>lib")
	endif()
else()
	set(JCPP_INSTALL_BIN_DIR "bin")
	set(JCPP_INSTALL_LIB_DIR "lib")
endif()
message(STATUS "CMAKE_INSTALL_PREFIX:" ${CMAKE_INSTALL_PREFIX} " INSTALL_TO_REPO:" ${INSTALL_TO_REPO})

set(CMAKE_POSITION_INDEPENDENT_CODE ON)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS ON)

message(STATUS "c++ Compiler is " "${CMAKE_CXX_COMPILER_ID}")

if(CMAKE_CXX_COMPILER_ID MATCHES "MSVC")
	set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} /Zi")
	set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /Zi")
	set(CMAKE_SHARED_LINKER_FLAGS_RELEASE "${CMAKE_SHARED_LINKER_FLAGS_RELEASE} /DEBUG /OPT:REF /OPT:ICF /INCREMENTAL:NO")
	set(CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS_RELEASE} /DEBUG /OPT:REF /OPT:ICF /INCREMENTAL:NO")
	set(CMAKE_SHARED_LINKER_FLAGS_DEBUG "${CMAKE_SHARED_LINKER_FLAGS_DEBUG} /DEBUG /OPT:REF /OPT:ICF /INCREMENTAL:NO")
	set(CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS_DEBUG} /DEBUG /OPT:REF /OPT:ICF /INCREMENTAL:NO")
	add_compile_options("$<$<CXX_COMPILER_ID:MSVC>:/source-charset:utf-8>")
	add_compile_options("$<$<CXX_COMPILER_ID:MSVC>:/execution-charset:utf-8>")
endif()

if(CMAKE_CXX_COMPILER_ID MATCHES "GNU" OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
	add_definitions(-fwrapv)
	add_definitions(-fno-optimize-sibling-calls)
	add_definitions(-ftls-model=initial-exec)
	add_definitions(-fnon-call-exceptions)
	add_definitions(-fomit-frame-pointer)
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fpermissive")
endif()

if(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
	add_definitions(-Wno-implicit-function-declaration)
endif()

if(JCPP_OS STREQUAL "macosx" AND JCPP_CPU STREQUAL "x86")
	add_definitions(-fno-stack-check)
endif()

if(CMAKE_COMPILER_IS_GNUCXX)
	include(CheckCXXCompilerFlag)
	check_cxx_compiler_flag("-Wa,-mbig-obj" GNU_BIG_OBJ_FLAG_ENABLE)
endif()

function(jcpp_enable_bigobj target)
	target_compile_options(${target}
		PRIVATE
		$<$<CXX_COMPILER_ID:MSVC>:/bigobj>
		$<$<AND:$<CXX_COMPILER_ID:GNU>,$<BOOL:${GNU_BIG_OBJ_FLAG_ENABLE}>>:-Wa,-mbig-obj>
	)
endfunction(jcpp_enable_bigobj)

macro(jcpp_add_dependencies)
	foreach(dep ${ARGV})
		string(REPLACE ":" ";" depInfo ${dep})
		list(LENGTH depInfo depInfoLength)
		if(depInfoLength EQUAL 2)
			list(GET depInfo 0 artifactId)
			list(GET depInfo 1 version)
			set(libName "${artifactId}")
			set(jcppDepPath "${JCPP_REPOSITORY_ROOT}/${artifactId}/${version}")
		else()
			list(GET depInfo 0 groupId)
			list(GET depInfo 1 artifactId)
			list(GET depInfo 2 version)
			string(REPLACE "." "/" groupPath ${groupId})
			set(libName "${groupId}-${artifactId}")
			set(jcppDepPath "${JCPP_REPOSITORY_ROOT}/${groupPath}/${artifactId}/${version}")
		endif()
		if(CMAKE_BUILD_TYPE MATCHES "Debug")
			set(binDir "${jcppDepPath}/debug/bin")
			set(libDir "${jcppDepPath}/debug/lib")
		else()
			set(binDir "${jcppDepPath}$<$<CONFIG:Debug>:/debug>/bin")
			set(libDir "${jcppDepPath}$<$<CONFIG:Debug>:/debug>/lib")
		endif()
		set(JCPP_DEPENDENCY_LIBS ${JCPP_DEPENDENCY_LIBS} "${libName}")
		set(JCPP_DEPENDENCY_LIB_DIRS ${JCPP_DEPENDENCY_LIB_DIRS} "${libDir}")
		set(JCPP_DEPENDENCY_INCLUDE_DIRS ${JCPP_DEPENDENCY_INCLUDE_DIRS} "${jcppDepPath}/include")
		if(WIN32)
			set(runtimeFiles "${binDir}/${libName}.dll")
		else()
			file(GLOB runtimeFiles "${libDir}/lib${libName}.*")
			list(REMOVE_ITEM runtimeFiles "${libDir}/lib${libName}.a")
		endif()
		set(JCPP_DEPENDENCY_RUNTIME_FILE_PATHS ${JCPP_DEPENDENCY_RUNTIME_FILE_PATHS} "${runtimeFiles}")
	endforeach()
	include_directories(
		${JCPP_DEPENDENCY_INCLUDE_DIRS}
	)
	link_directories(
		${JCPP_DEPENDENCY_LIB_DIRS}
	)
endmacro()

function(jcpp_enable_debug_info target)
	if(WIN32)
		add_custom_command(TARGET ${target} POST_BUILD
			COMMAND cmd /c ${JCPP_HOME}/bin/enabledebug $<TARGET_FILE:${target}>
		)
	endif()
endfunction(jcpp_enable_debug_info)

add_subdirectory(main)
if(BUILD_TEST)
	enable_testing()
	add_subdirectory(test)
endif()
